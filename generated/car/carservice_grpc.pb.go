// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package car

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarServiceClient is the client API for CarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarServiceClient interface {
	EchoCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarEcho, error)
	EchoCars(ctx context.Context, opts ...grpc.CallOption) (CarService_EchoCarsClient, error)
}

type carServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarServiceClient(cc grpc.ClientConnInterface) CarServiceClient {
	return &carServiceClient{cc}
}

func (c *carServiceClient) EchoCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarEcho, error) {
	out := new(CarEcho)
	err := c.cc.Invoke(ctx, "/car.CarService/EchoCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carServiceClient) EchoCars(ctx context.Context, opts ...grpc.CallOption) (CarService_EchoCarsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CarService_ServiceDesc.Streams[0], "/car.CarService/EchoCars", opts...)
	if err != nil {
		return nil, err
	}
	x := &carServiceEchoCarsClient{stream}
	return x, nil
}

type CarService_EchoCarsClient interface {
	Send(*Car) error
	Recv() (*CarEcho, error)
	grpc.ClientStream
}

type carServiceEchoCarsClient struct {
	grpc.ClientStream
}

func (x *carServiceEchoCarsClient) Send(m *Car) error {
	return x.ClientStream.SendMsg(m)
}

func (x *carServiceEchoCarsClient) Recv() (*CarEcho, error) {
	m := new(CarEcho)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarServiceServer is the server API for CarService service.
// All implementations must embed UnimplementedCarServiceServer
// for forward compatibility
type CarServiceServer interface {
	EchoCar(context.Context, *Car) (*CarEcho, error)
	EchoCars(CarService_EchoCarsServer) error
	mustEmbedUnimplementedCarServiceServer()
}

// UnimplementedCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarServiceServer struct {
}

func (UnimplementedCarServiceServer) EchoCar(context.Context, *Car) (*CarEcho, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoCar not implemented")
}
func (UnimplementedCarServiceServer) EchoCars(CarService_EchoCarsServer) error {
	return status.Errorf(codes.Unimplemented, "method EchoCars not implemented")
}
func (UnimplementedCarServiceServer) mustEmbedUnimplementedCarServiceServer() {}

// UnsafeCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarServiceServer will
// result in compilation errors.
type UnsafeCarServiceServer interface {
	mustEmbedUnimplementedCarServiceServer()
}

func RegisterCarServiceServer(s grpc.ServiceRegistrar, srv CarServiceServer) {
	s.RegisterService(&CarService_ServiceDesc, srv)
}

func _CarService_EchoCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarServiceServer).EchoCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/car.CarService/EchoCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarServiceServer).EchoCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarService_EchoCars_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CarServiceServer).EchoCars(&carServiceEchoCarsServer{stream})
}

type CarService_EchoCarsServer interface {
	Send(*CarEcho) error
	Recv() (*Car, error)
	grpc.ServerStream
}

type carServiceEchoCarsServer struct {
	grpc.ServerStream
}

func (x *carServiceEchoCarsServer) Send(m *CarEcho) error {
	return x.ServerStream.SendMsg(m)
}

func (x *carServiceEchoCarsServer) Recv() (*Car, error) {
	m := new(Car)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CarService_ServiceDesc is the grpc.ServiceDesc for CarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "car.CarService",
	HandlerType: (*CarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoCar",
			Handler:    _CarService_EchoCar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoCars",
			Handler:       _CarService_EchoCars_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "car/carservice.proto",
}
